
When I joined the ITmedia redevelopment project, the main goals were to modernize the tech stack, improve performance under high load, and create a better editorial workflow. I led both front-end and back-end efforts.

On the front end, I refactored legacy code into modular ES6 components, introduced Webpack bundling and code splitting, and used lazy loading for below-the-fold assets. Critical CSS was inlined for first render optimization. We also introduced a React widget for dynamic sections like “related articles” and “live feed,” while core article pages remained server-rendered for SEO.

On the back end, we built the system on Laravel (PHP). We separated content storage in MySQL and search indexing via Elasticsearch. To handle the traffic spikes when a popular article goes viral, we introduced Redis-based caching at multiple levels: page caching, fragment caching, and object caching. The infrastructure runs in Docker containers orchestrated by Kubernetes on AWS, with auto-scaling for web servers. Deployments go through CI pipelines (GitHub Actions) and support blue/green releases to avoid downtime.

For editorial ease, I built a custom CMS interface that supports draft scheduling, preview in multiple devices, media asset management, and role-based permissions. Integration with analytics and error tracking (Sentry) was built in so editors and devs can see performance / errors per article.

Over time, we saw significant improvements: LCP dropped from ~3.0 s to ~1.2 s, bounce rate on mobile decreased, and editorial throughput increased (new articles could go live faster). We also learned the importance of performance budgets, aggressive caching invalidation strategies, and the balance between dynamic interactivity and SEO-friendly server rendering. In the next iterations, we plan to introduce PWA features, edge rendering (using Cloudflare Workers or Vercel Edge), and more AI-powered content recommendations.